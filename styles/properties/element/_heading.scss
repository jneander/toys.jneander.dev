@use 'sass:math';

@use '../../shared/property';
@use '../base/color';
@use '../base/font-family' as fontFamily;
@use '../base/font-weight' as fontWeight;
@use '../base/line-height' as lineHeight;

@function _define($identifier, $default-value) {
  @return property.define(jn-element-heading-#{$identifier}, $default-value);
}

$properties: (
  'color': _define('color', color.get-value('grey', 850)),
  'fontFamily': _define('fontFamily', fontFamily.get-value('secondary')),
  'fontStyle': _define('fontStyle', normal),
  'fontWeight': _define('fontWeight', fontWeight.get-value('bold')),
  'lineHeight': _define('lineHeight', 1.25),
  'maxInlineSize': _define('maxInlineSize', 56ch),
  'modularScale': _define('modularScale', 1.3),
);

@function get-value($keys...) {
  @return property.get-value($properties, $keys...);
}

@function modular-font-size($scaleStep: 0) {
  @if $scaleStep == 0 {
    @return 1rem;
  }

  $operator: '*';
  @if $scaleStep < 1 {
    $operator: '/';
  }

  $val: 1rem;
  $limit: math.abs($scaleStep);

  @for $i from 1 through $limit {
    $val: #{$val} #{$operator} #{get-value('modularScale')};
  }

  @return calc(#{$val});
}

@function modular-max-inline-size($scaleStep: 0) {
  @if $scaleStep <= 0 {
    @return get-value('maxInlineSize');
  }

  $val: get-value('maxInlineSize');

  @for $i from 1 through $scaleStep {
    $val: #{$val} / #{get-value('modularScale')};
  }

  @return calc(#{$val});
}
